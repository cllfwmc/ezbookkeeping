# ===========================================
#  GitHub Actions – Build & Sign Android APK
# ===========================================

name: Build Android APK

on:
  push:
    branches: [apk_dispatch]
    tags: ['v*']
  pull_request:
    branches: [apk_dispatch]

env:
  NODE_VERSION: 22
  JAVA_DIST:  temurin
  JAVA_VERSION: 21
  CAPACITOR_VERSION: 6.2.1
  PLUGIN_VERSION: 6.0.2
  # SERVER_PORT: xxxx
  # 默认服务器 URL，可通过 SECRET 覆盖
  # SERVER_URL: 'http://xx.xxx.xx.xx:xxxx/'
  
jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      # ---------- 基础环境 ----------
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}

      # ---------- 依赖安装 ----------
      - name: Install core dependencies
        run: npm install

      # ---------- 依赖 & 平台 ----------
      - name: Install Capacitor CLI and plugins
        run: |
          npm install @capacitor/core@${{ env.CAPACITOR_VERSION }} @capacitor/cli@${{ env.CAPACITOR_VERSION }}
          npm install @capacitor/android@${{ env.CAPACITOR_VERSION }} @capacitor/ios@${{ env.CAPACITOR_VERSION }} --save-dev
          npm install @capacitor/app@${{ env.PLUGIN_VERSION }} @capacitor/keyboard@${{ env.PLUGIN_VERSION }} @capacitor/splash-screen@${{ env.PLUGIN_VERSION }}
          npx cap init ezbookkeeping com.example.ezbookkeeping --web-dir=dist --npm-client=npm --no-interactive || true

      # ---------- Web构建 ----------
      - name: Build web app
        run: npm run build

      # ---------- 修改 Capacitor 配置 ----------
      - name: Update Capacitor Config
        run: |
          # 如果设置了 SERVER_IP 环境变量，则使用它构建 URL
          if [ -n "${{ secrets.SERVER_IP }}" ]; then
            SERVER_URL="http://${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PORT }}/"
            echo "使用自定义服务器 URL: $SERVER_URL"
          else
            SERVER_URL="${{ env.SERVER_URL }}"
            echo "使用默认服务器 URL: $SERVER_URL"
          fi
          
          # 使用 sed 替换 capacitor.config.ts 中的 URL
          sed -i "s|url: '.*'|url: '$SERVER_URL'|" capacitor.config.ts
          
          # 显示修改后的配置
          echo "修改后的 capacitor.config.ts:"
          grep -A 3 "server:" capacitor.config.ts

      # ---------- 添加 Android 平台 ----------
      - name: Add Android platform
        run: npx cap add android || true

      # ---------- 添加位置权限 ----------
      - name: Add Location Permissions
        run: |
          sed -i '/<manifest/a \
          <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /> \
          <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />' android/app/src/main/AndroidManifest.xml

      # -- 启用 WebView 定位功能 --
      - name: Enable WebView Geolocation in MainActivity
        run: |
          MAIN_ACTIVITY_PATH="android/app/src/main/java/com/example/ezbookkeeping/MainActivity.java"
            
          # 备份原始文件
          cp "$MAIN_ACTIVITY_PATH" "$MAIN_ACTIVITY_PATH.bak"
            
          # 查找 import 区域并插入 WebChromeClient 的 import
          sed -i '/import com.getcapacitor.BridgeActivity;/a\
          import android.webkit.WebChromeClient;\
          import android.webkit.GeolocationPermissions;\
          import android.os.Bundle;' "$MAIN_ACTIVITY_PATH"
            
          # 在类体中添加 onCreate 方法（如果不存在）并插入 WebView 设置
          if ! grep -q "onGeolocationPermissionsShowPrompt" "$MAIN_ACTIVITY_PATH"; then
            sed -i '/public class MainActivity extends BridgeActivity {/a\
          \
          @Override\
          public void onCreate(Bundle savedInstanceState) {\
            super.onCreate(savedInstanceState);\
            this.bridge.getWebView().setWebChromeClient(new WebChromeClient() {\
              @Override\
              public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\
                callback.invoke(origin, true, false);\
              }\
            });\
          }' "$MAIN_ACTIVITY_PATH"
            fi

            echo "MainActivity.java 已打补丁，支持定位："
            cat "$MAIN_ACTIVITY_PATH"

      # ---------- 替换图标 ----------
      - name: Replace Android Icons
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick

          ICON_SRC="resources/ezbookkeeping-512.png"
          echo "检查源图标文件:"
          ls -l "$ICON_SRC"
          file "$ICON_SRC"
          identify "$ICON_SRC"

          rm -rf android/app/src/main/res/mipmap-*
          mkdir -p android/app/src/main/res/mipmap-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}

          # 普通图标
          convert "$ICON_SRC" -resize 48x48   android/app/src/main/res/mipmap-mdpi/ic_launcher.png
          convert "$ICON_SRC" -resize 72x72   android/app/src/main/res/mipmap-hdpi/ic_launcher.png
          convert "$ICON_SRC" -resize 96x96   android/app/src/main/res/mipmap-xhdpi/ic_launcher.png
          convert "$ICON_SRC" -resize 144x144 android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          convert "$ICON_SRC" -resize 192x192 android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

          # 圆形图标（ic_launcher_round）
          convert "$ICON_SRC" -resize 48x48   android/app/src/main/res/mipmap-mdpi/ic_launcher_round.png
          convert "$ICON_SRC" -resize 72x72   android/app/src/main/res/mipmap-hdpi/ic_launcher_round.png
          convert "$ICON_SRC" -resize 96x96   android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
          convert "$ICON_SRC" -resize 144x144 android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
          convert "$ICON_SRC" -resize 192x192 android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png

          # 清理 Gradle 缓存
          cd android && ./gradlew clean && cd ..

      # ---------- 同步 & 构建 ----------
      - name: Sync Android
        run: npx cap sync android


      # ---------- 增加 splash screen ----------
      - name: Add Splash Screen
        run: |
          # 1. 先清掉所有缓存目录
          rm -rf android/.gradle
          rm -rf ~/.gradle/caches
          rm -rf android/app/build
          rm -rf android/app/src/main/res/drawable-*
          rm -rf android/app/src/debug/res/drawable-* 2>/dev/null || true
          rm -rf android/app/src/release/res/drawable-* 2>/dev/null || true

          sudo apt-get update && sudo apt-get install -y imagemagick

          # 创建 drawable 目录
          rm -rf android/app/src/main/res/drawable-*
          mkdir -p android/app/src/main/res/drawable-mdpi
          mkdir -p android/app/src/main/res/drawable-hdpi
          mkdir -p android/app/src/main/res/drawable-xhdpi
          mkdir -p android/app/src/main/res/drawable-xxhdpi
          mkdir -p android/app/src/main/res/drawable-xxxhdpi

          # 正确分配不同分辨率到不同目录（避免重复覆盖）
          convert resources/splash_720x1280.png  android/app/src/main/res/drawable-mdpi/splash.png
          convert resources/splash_1080x1920.png android/app/src/main/res/drawable-hdpi/splash.png
          convert resources/splash_1080x2400.png android/app/src/main/res/drawable-xhdpi/splash.png
          convert resources/splash_1440x2560.png android/app/src/main/res/drawable-xxhdpi/splash.png
          convert resources/splash_1440x3120.png android/app/src/main/res/drawable-xxxhdpi/splash.png

          # 生成 launch_background.xml
          mkdir -p android/app/src/main/res/drawable
          cat > android/app/src/main/res/drawable/launch_background.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
              <!-- 背景色 -->
              <item>
                  <shape android:shape="rectangle">
                      <solid android:color="@android:color/white" />
                  </shape>
              </item>

              <!-- 等比缩放的图片 -->
              <item>
                  <bitmap
                      android:gravity="center"
                      android:tileMode="disabled"
                      android:src="@drawable/splash" />
              </item>
          </layer-list>
          EOF

          # 创建 styles.xml
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">@color/colorPrimary</item>
                  <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
                  <item name="colorAccent">@color/colorAccent</item>
              </style>

              <style name="LaunchTheme" parent="Theme.AppCompat.Light.NoActionBar">
                  <item name="android:windowBackground">@drawable/launch_background</item>
                  <item name="android:windowFullscreen">true</item>
              </style>
          </resources>
          EOF

          # 修改 AndroidManifest.xml 中的 theme
          sed -i 's/android:theme="@style\/AppTheme\.NoActionBarLaunch"/android:theme="@style\/LaunchTheme"/' android/app/src/main/AndroidManifest.xml

          # 清理 Gradle 缓存
          cd android && ./gradlew clean && cd ..

      # ---------- 签名配置 ----------
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEY_STORE_BASE64 }}" | base64 -d > upload-keystore.jks
          ls -l upload-keystore.jks

      # ---------- 创建 key.properties ----------
      - name: Create key.properties
        working-directory: android
        run: |
          echo "storePassword=${{ secrets.KEY_STORE_PASSWORD }}" > key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}"      >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}"            >> key.properties
          echo "storeFile=$(realpath ../upload-keystore.jks)"   >> key.properties
          cat key.properties

      # ---------- 注入签名配置 ----------
      - name: Inject signing config into build.gradle
        run: |
          cd android/app
          
          # 修复 build.gradle 文件中的签名配置问题
          # 1. 备份原始文件
          cp build.gradle build.gradle.bak
          
          # 2. 检查 key.properties 是否存在和有效
          if [ ! -f "../key.properties" ]; then
            echo "警告: key.properties 文件不存在，这可能导致签名失败"
          else
            echo "key.properties 文件已找到"
          fi
          
          # 3. 使用 sed 直接替换 build.gradle 文件中的签名配置
          # 移除任何现有的 signingConfigs 部分
          sed -i '/signingConfigs/,/}/d' build.gradle
          
          # 在 android { 块的开始位置添加签名配置
          sed -i '/android {/a \
            signingConfigs {\
                release {\
                    def keystorePropertiesFile = rootProject.file("key.properties")\
                    def keystoreProperties = new Properties()\
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\
                    storeFile file(keystoreProperties["storeFile"])\
                    storePassword keystoreProperties["storePassword"]\
                    keyAlias keystoreProperties["keyAlias"]\
                    keyPassword keystoreProperties["keyPassword"]\
                }\
            }' build.gradle
          
          # 在 buildTypes 块中添加 signingConfig
          sed -i '/buildTypes {/,/}/s/release {/release {\
                signingConfig signingConfigs.release/' build.gradle
          
          # 4. 打印修改后的内容以验证
          echo "查看修改后的 build.gradle 文件:"
          grep -n -A 15 "signingConfigs" build.gradle

      # ---------- 构建 APK ----------
      - name: Build Android APK
        run: |
          cd android
          
          # 在构建前检查 app/build.gradle 文件内容
          echo "构建前检查 app/build.gradle 文件内容:"
          grep -n -A 5 -B 5 "signingConfigs" app/build.gradle || echo "未找到 signingConfigs 配置"
          
          # 使用 info 模式构建，以获取更多错误信息
          ./gradlew assembleRelease --no-daemon --info
          
      # ---------- 确认实际输出路径 ----------
      - name: Locate APK
        id: apk
        run: |
          # 找到真正的 APK
          APK_PATH=$(find android -path '*/build/outputs/apk/*' -name '*.apk' | head -n1)
          echo "APK_PATH=$APK_PATH" >> "$GITHUB_OUTPUT"
          echo "Found APK at: $APK_PATH"
          ls -l "$APK_PATH"
      
      # ---------- 上传产物 ----------
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-apks
          path: ${{ steps.apk.outputs.APK_PATH }}
          retention-days: 1
      
      # ---------- 创建 Release ----------
      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 📦 发布说明
            - 基于 commit ${{ github.sha }}
            - 已签名 Release APK
          draft: false
          prerelease: false
      
      # ---------- 上传 Release APK ----------
      - name: Upload Release APK
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.apk.outputs.APK_PATH }}
          asset_name: ezbookkeeping-${{ github.ref_name }}.apk
          asset_content_type: application/vnd.android.package-archive